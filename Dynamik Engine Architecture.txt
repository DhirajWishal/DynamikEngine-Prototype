// ----------

Author(s):	Dhiraj Wishal
Project:	Dynamik Engine
Date:		--/--/----
IDE:		MS Visual Studio Community 2019, MS Visual Studio Code

Developer Team:
* Dhiraj Wishal
* Chamindu Abeysekera
* Helitha Senaratne

Dynamik Engine Architecture.txt file.

// ----------

---------- ########## ////////// DYNAMIK ENGINE- IN DEPTH \\\\\\\\\\ ########## ----------

Dynamik Engine	- Launcher
				- Engine

# The Launcher activates the Game Engine.
# Any modification to the engine (non-developer) can be done through the Launcher with 
  the Dynamik API.
# The Laucher and the Engine has its own windows. The Engine's window will get initialized 
  once the user activates the Game Engine. 

 _________________________________________________________ 
| GAME ENGINE                                             |
|  ________________________  ___________________________  |
| |                        ||                           | |
| |                        ||                           | |
| |                        ||                           | |
| |                        ||                           | |
| |       LAUNCHER         ||          ENGINE           | |
| |                        ||                           | |
| |                        ||                           | |
| |                        ||                           | |
| |________________________||___________________________| |
|_________________________________________________________|

 _________________          ___________________          __________________
|                 |        |                   |        |                  |
|                 |        |                   |	|                  |
|                 |        |                   |	|                  |
|                 | -----> |     LAUNCHER      | -----> |      ENGINE      | <------|
|                 | <----- |                   |	|                  | ------ |
|      USERS      |        |                   |	|                  |      | |
|                 |        |___________________|	|__________________|      | |
|                 |                                                               | |
|                 | <-------------------------------------------------------------- |
|                 | ----------------------------------------------------------------|
|                 |
|_________________|


 ---------- Launcher ----------
The first program to run in the engine. This contains,
* Games
* Market
* Settings
* Studio (World Creator)
* Launcher and Engine settings
* Login
* Engine API
* Network Client
* Database
* Developer Tools (Dev mode)

---------- Launcher- Basic load ups ----------
After the user launches the Launcher App, the first screen the user will get promped is the Login
screen. Here the user can either enter the Login details and continue with the experience or 
create a new account to proceed. After the user has successfully logged in, the user has a big
menu consisting of the Game window, Market, Studio and the Settings Menu. The Launcher also should 
consist with an option to get to the About window.
Inorder to start the Engine, the user must first select a game or must hit the "Run" option in the
Studio. These are the only two places where the user can activate the Engine.

@ The user does no have the authority to start the Engine. Only the engine is capable to do so.
@ The Launcher must have its own Audio Engine if any audio playback is required.

The Game Engine settings will only be altered by the Launcher and the changed must be made in the
Game Engine. The Launcher also will manage the user database.

---------- Launcher- Main Menu ----------
The Main Menu gives easy access to the user with the other services supported by the Launcher (Eg:
Studio). The Menu must also be colourful and visually pleasing.

---------- Launcher- Studio ----------
Studio is one of the biggest components of the Launcher App. It consists of,
* Simmulated World
* File systems
* Scriptors and Script Interpreters
* Assets handler
* World Editor tools
* Game Engine Tools
* L2E (Launcher-to-Engine) Command line
* Shader Compilers
* Debugging Tools
* Performance Profilers

The Studio will also have a "Run" option where it would activate the Engine and run the current
scene in real time.

---------- Launcher- Settings Menu ----------
The Settings Menu consists of options to manipulate both Launcher and Engine settings. The settings menu
must have different sub menus for different major components (Eg: Engine: Brightness, Audio Volume.. 
Launcher: Brightness, Editor Theme..)

---------- Engine ----------
The engine is the second program which is loaded by the Launcher. The engine contains the 
code necessary to run the game. The engine contains,
* Advanced Dynamic Graphics Renderer (ADGR)
* Physics Engine (PhysiX by NVIDIA)
* Memory Management
* Resource Management
* AI Engine
* Player Mechanics
* Custom Data Structures
* Custom Data Types
* Human Interface Device Management
* Game specific Menus and Settings
* Console
* File Management
* Audio Engine
* Device Drivers
* Event System

---------- Engine- Advanced Dynamic Graphics Renderer ----------
The ADGR contains two main components.
* Core
* Renderer


 __________________          ____________________________________               ____________________
|                  |        |                                    |             |                    |
|                  |        |               CORE                 | ----------> |      DISPLAY       |
|                  |        |____________________________________|             |____________________|
|    GAME ENGINE   |        |                                    |
|                  | -----> |             RENDERER               |            
|                  | <----- |                                    |
|__________________|        |____________________________________| 


ADGR- Core:
* Graphics Pipeline
* Shaders
* Swapchain
* Framebuffers
* Third-party SDKs (Vulkan, OpenGL)
* Rendering modes (Game, Video, Image)
* Window creation

# The Core cannot be re-programmed. Only certain values can be tweaked with the ADGR API.
# Data can only be passed to the Core by the Renderer layer.

ADGR- Renderer:
* Dynamic Wind
* Dynamic Lighting (Ray tracing)
* Shader compilation
* Buffers (Index, Vertex)
* Texture Management
* Mesh Managemant
* Physics Engine Sync.
* Audio Engine Sync.
* ADGR API
* Custom Data Structures
* Transformations
* Renderer math

# The Game Engine interacts only with the Renderer layer. This layer has the authority to tweak the 
  Core.
# Video Player, Image Viewer, Gameplay/ Camera Angles are initialized in this layer.

---------- Engine- Memory Management ----------
Heap Allocation:
The Memory Manager of the Dynamik Engine utilizes the Double-buffered Stack Allocator. Custom
Data Types are also defined here.


 ____________________________________________________________________________________________
|                              |                                 |                           |
|                              |                                 |                           |
|           LOWER              | ----->                   <----- |          HIGHER           |
|                              |                                 |                           |
|______________________________|_________________________________|___________________________|
Low index pointers                                                         High index pointers


Defragmentation:
Uses the Shift Allocation technique. In this way, in the lower bound stack, the "in use" blocks of
memory gets shifted to the higher index, and the upper bound stack the "in use" blocks of memory 
gets shifted to the lower index. This way empty blocks get moved to the middle where free blocks
are located.

---------- ########## ////////// DYNAMIK ENGINE- ENGINE ARCHITECTURE \\\\\\\\\\ ########## ----------
