#pragma once
#ifndef _DYNAMIK_EVENT_COMPONENT_H
#define _DYNAMIK_EVENT_COMPONENT_H

#include <GLFW/glfw3.h>
#include "Public/Pointer.h"


namespace Dynamik {
	enum class DMKEventCategory {
		DMK_EVENT_CATEGORY_UNKNOWN,

		DMK_EVENT_CATEGORY_KEY,
		DMK_EVENT_CATEGORY_MOUSE_BUTTON,
		DMK_EVENT_CATEGORY_MOUSE_SCROLL,
		DMK_EVENT_CATEGORY_APPLICATION,
		DMK_EVENT_CATEGORY_JOYSTICK,
		DMK_EVENT_CATEGORY_TEXT,
	};

	enum class DMKEventType {
		DMK_EVENT_TYPE_UNKNOWN,

		DMK_EVENT_TYPE_PRESS,
		DMK_EVENT_TYPE_REPEAT,
		DMK_EVENT_TYPE_RELEASE,

		DMK_EVENT_TYPE_SCROLL,
	};

	enum class DMKEvent : UI32 {
		DMK_EVENT_UNKNOWN,

		DMK_EVENT_MOUSE_BUTTON_RIGHT,
		DMK_EVENT_MOUSE_BUTTON_LEFT,
		DMK_EVENT_MOUSE_BUTTON_MIDDLE,
		DMK_EVENT_MOUSE_BUTTON_THUMB_1,
		DMK_EVENT_MOUSE_BUTTON_THUMB_2,

		DMK_EVENT_MOUSE_POSITION_X,
		DMK_EVENT_MOUSE_POSITION_Y,
		DMK_EVENT_MOUSE_SCROLL_UP,
		DMK_EVENT_MOUSE_SCROLL_DOWN,
		DMK_EVENT_MOUSE_WHEEL,

		DMK_EVENT_KEY_0,
		DMK_EVENT_KEY_1,
		DMK_EVENT_KEY_2,
		DMK_EVENT_KEY_3,
		DMK_EVENT_KEY_4,
		DMK_EVENT_KEY_5,
		DMK_EVENT_KEY_6,
		DMK_EVENT_KEY_7,
		DMK_EVENT_KEY_8,
		DMK_EVENT_KEY_9,

		DMK_EVENT_KEY_NUMPAD_0,
		DMK_EVENT_KEY_NUMPAD_1,
		DMK_EVENT_KEY_NUMPAD_2,
		DMK_EVENT_KEY_NUMPAD_3,
		DMK_EVENT_KEY_NUMPAD_4,
		DMK_EVENT_KEY_NUMPAD_5,
		DMK_EVENT_KEY_NUMPAD_6,
		DMK_EVENT_KEY_NUMPAD_7,
		DMK_EVENT_KEY_NUMPAD_8,
		DMK_EVENT_KEY_NUMPAD_9,

		DMK_EVENT_KEY_PLUS,
		DMK_EVENT_KEY_MINUS,
		DMK_EVENT_KEY_DIVIDE,
		DMK_EVENT_KEY_MULTIPLY,
		DMK_EVENT_KEY_DECIMAL,

		DMK_EVENT_KEY_A,
		DMK_EVENT_KEY_B,
		DMK_EVENT_KEY_C,
		DMK_EVENT_KEY_D,
		DMK_EVENT_KEY_E,
		DMK_EVENT_KEY_F,
		DMK_EVENT_KEY_G,
		DMK_EVENT_KEY_H,
		DMK_EVENT_KEY_I,
		DMK_EVENT_KEY_J,
		DMK_EVENT_KEY_K,
		DMK_EVENT_KEY_L,
		DMK_EVENT_KEY_M,
		DMK_EVENT_KEY_N,
		DMK_EVENT_KEY_O,
		DMK_EVENT_KEY_P,
		DMK_EVENT_KEY_Q,
		DMK_EVENT_KEY_R,
		DMK_EVENT_KEY_S,
		DMK_EVENT_KEY_T,
		DMK_EVENT_KEY_U,
		DMK_EVENT_KEY_V,
		DMK_EVENT_KEY_W,
		DMK_EVENT_KEY_X,
		DMK_EVENT_KEY_Y,
		DMK_EVENT_KEY_Z,

		DMK_EVENT_KEY_CTRL_LEFT,
		DMK_EVENT_KEY_ALT_LEFT,
		DMK_EVENT_KEY_SHIFT_LEFT,
		DMK_EVENT_KEY_COMMAND_LEFT,
		DMK_EVENT_KEY_CTRL_RIGHT,
		DMK_EVENT_KEY_ALT_RIGHT,
		DMK_EVENT_KEY_SHIFT_RIGHT,
		DMK_EVENT_KEY_COMMAND_RIGHT,

		DMK_EVENT_KEY_ARROW_UP,
		DMK_EVENT_KEY_ARROW_DOWN,
		DMK_EVENT_KEY_ARROW_LEFT,
		DMK_EVENT_KEY_ARROW_RIGHT,

		DMK_EVENT_KEY_BACKSPACE,
		DMK_EVENT_KEY_TAB,
		DMK_EVENT_KEY_ENTER,
		DMK_EVENT_KEY_PAUSE,

		DMK_EVENT_KEY_CAPSLOCK,
		DMK_EVENT_KEY_ESCAPE,
		DMK_EVENT_KEY_SPACEBAR,
		DMK_EVENT_KEY_PAGE_UP,
		DMK_EVENT_KEY_PAGE_DOWN,
		DMK_EVENT_KEY_END,
		DMK_EVENT_KEY_HOME,
		DMK_EVENT_KEY_INSERT,
		DMK_EVENT_KEY_DELETE,
		DMK_EVENT_KEY_NUMLOCK,
		DMK_EVENT_KEY_SCROLLLOCK,

		DMK_EVENT_KEY_SEMICOLON,
		DMK_EVENT_KEY_EQUAL,
		DMK_EVENT_KEY_COMMA,
		DMK_EVENT_KEY_UNDERSCORE,
		DMK_EVENT_KEY_HYPHEN,
		DMK_EVENT_KEY_PERIOD,
		DMK_EVENT_KEY_SLASH,
		DMK_EVENT_KEY_TIDLE,
		DMK_EVENT_KEY_BRACKET_LEFT,
		DMK_EVENT_KEY_BRACKET_RIGHT,
		DMK_EVENT_KEY_BACKSLASH,
		DMK_EVENT_KEY_APOSTROPHY,

		DMK_EVENT_KEY_EXCLEMATION,
		DMK_EVENT_KEY_CARET,
		DMK_EVENT_KEY_HASH,
		DMK_EVENT_KEY_DOLLAR,
		DMK_EVENT_KEY_AMPERSAND,
		DMK_EVENT_KEY_ASTERIX,
		DMK_EVENT_KEY_QUOTE,
	};

	class DMKEventComponent {
	public:
		DMKEventComponent() {}
		DMKEventComponent(DMKEventCategory cat) : category(cat) {}
		virtual ~DMKEventComponent() {}

		DMKEventCategory category = DMKEventCategory::DMK_EVENT_CATEGORY_KEY;
		DMKEventType type = DMKEventType::DMK_EVENT_TYPE_UNKNOWN;
		DMKEvent event = DMKEvent::DMK_EVENT_UNKNOWN;

		POINTER<GLFWwindow> window;
	};
}

#endif // !_DYNAMIK_EVENT_COMPONENT_H
