/* VERTEX SHADER */
#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 0) uniform UniformBufferObject {
    mat4 model;
    mat4 view;
    mat4 proj;
    vec3 objectColor;
} Ubo;

layout(push_constant) uniform PushConsts {
	vec4 lightPos;
} pushConsts;

layout(location = 0) in vec3 aPos;  // this
layout(location = 1) in vec3 inColor;
layout(location = 2) in vec2 inTexCoord;
layout(location = 3) in vec3 aNormal;   // this

layout(location = 0) out vec3 fragPos;          // this
layout(location = 1) out vec3 fragTexCoord;     // this
layout(location = 2) out vec3 fragNormal;       // this
layout(location = 3) out vec3 outLightPos;      // this
layout(location = 4) out vec3 outLightColor;    // this

const float mapSize = 10.0f;

void main() {
    gl_Position = Ubo.proj * Ubo.view * Ubo.model * vec4(aPos, mapSize);

    fragPos = vec3(Ubo.view * Ubo.model * vec4(aPos, mapSize));

    fragTexCoord = vec3((239 / 256.0f), (142 / 256.0f), (56 / 256.0f));
    fragNormal = mat3(transpose(inverse(Ubo.view * Ubo.model))) * aNormal;
    outLightPos = vec3(Ubo.view * pushConsts.lightPos);
    outLightColor = Ubo.objectColor;
}

/* FRAGMENT SHADER */
#version 450
#extension GL_ARB_separate_shader_objects : enable

layout(binding = 1) uniform sampler2D texSampler;

layout(location = 0) in vec3 FragPos;	    // this
layout(location = 1) in vec3 lightColor;    // this
layout(location = 2) in vec3 Normal;	    // this
layout(location = 3) in vec3 LightPos;	    // this
layout(location = 4) in vec3 objectColor;	// this

layout(location = 0) out vec4 outColor;

void main() {
    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;    
    
    // diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(LightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // specular
    float specularStrength = 0.5;
    vec3 viewDir = normalize(-FragPos); // the viewer is always at (0,0,0) in view-space, so viewDir is (0,0,0) - Position => -Position
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 256);
    vec3 specular = specularStrength * spec * lightColor; 
    
    vec3 result = (ambient + diffuse + specular) * objectColor;
    outColor = vec4(result, 1.0);
}